/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the Sample Projects chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.8/userguide/sample_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

def awsSdkVersion = '2.26.18' // Use a recent version

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    // AWS SDK for Java v2 - S3
    implementation platform("software.amazon.awssdk:bom:$awsSdkVersion")
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:url-connection-client' // For standard HTTP client
    // Or use Apache HTTP client if more control is needed (e.g., specific SSL contexts)
    // implementation 'software.amazon.awssdk:apache-client'

    // Logging - SLF4j API and Logback implementation
    implementation 'org.slf4j:slf4j-api:2.0.13'
    runtimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    runtimeOnly 'ch.qos.logback:logback-core:1.5.6'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'log.agent.App' // Update this to your actual main class name
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Task to create a fat/uber JAR including all dependencies
task buildFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    archiveBaseName = project.name + '-all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Exclude duplicate files from dependencies
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar // Copy contents of the standard JAR into the fat JAR
}

// Ensure the fat JAR is built when running the standard build task
build {
    dependsOn buildFatJar
}

