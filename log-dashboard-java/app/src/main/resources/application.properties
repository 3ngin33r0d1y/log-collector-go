# Spring Boot application properties

# Server port (optional, default is 8080)
# server.port=8080

# Vault Configuration (using Spring Cloud Vault)
spring.application.name=log-dashboard
spring.config.import=vault://

# Vault connection details (read from environment variables by Spring Cloud Vault)
# VAULT_ADDR: Address of the Vault server (e.g., http://127.0.0.1:8200)
# VAULT_TOKEN: Vault token (if using token auth - less secure for production)
# Or for AppRole:
# spring.cloud.vault.authentication=APPROLE
# spring.cloud.vault.app-role.role-id=${VAULT_ROLE_ID} # Read from env var
# spring.cloud.vault.app-role.secret-id=${VAULT_SECRET_ID} # Read from env var
# spring.cloud.vault.app-role.app-role-path=approle # Default path, change if needed

# Vault KV backend details
spring.cloud.vault.kv.enabled=true
spring.cloud.vault.kv.backend=secret # KV v2 mount path (use 'secret' if mount path is 'secret/')
spring.cloud.vault.kv.application-name=XSf/s3-log-config/dev # Path within the KV backend (maps to secret/data/XSf/s3-log-config/dev)
# Note: Spring Cloud Vault uses spring.application.name and active profiles to build the path.
# The path will be constructed like: backend/application-name,profile -> secret/XSf/s3-log-config/dev
# Adjust kv.backend and kv.application-name based on your exact Vault path structure.
# If your path is exactly Secret/XSf/s3-log-config/dev/default, you might need custom config or adjust application-name.

# Optional: Disable SSL validation for Vault connection (NOT recommended for production)
# spring.cloud.vault.ssl.verify=false

# Logging level (optional)
# logging.level.log.dashboard=DEBUG
# logging.level.org.springframework.vault=DEBUG

# Actuator endpoints (optional)
management.endpoints.web.exposure.include=health,info,prometheus

